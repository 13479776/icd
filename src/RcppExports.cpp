// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/icd9.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// icd9ComorbidShortMatrix
SEXP icd9ComorbidShortMatrix(const DataFrame& icd9df, const List& icd9Mapping, const std::string visitId = "visitId", const std::string icd9Field = "icd9", const int threads = 8, const int chunkSize = 256, const int ompChunkSize = 1);
static SEXP icd9_icd9ComorbidShortMatrix_try(SEXP icd9dfSEXP, SEXP icd9MappingSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP threadsSEXP, SEXP chunkSizeSEXP, SEXP ompChunkSizeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const DataFrame& >::type icd9df(icd9dfSEXP );
        Rcpp::traits::input_parameter< const List& >::type icd9Mapping(icd9MappingSEXP );
        Rcpp::traits::input_parameter< const std::string >::type visitId(visitIdSEXP );
        Rcpp::traits::input_parameter< const std::string >::type icd9Field(icd9FieldSEXP );
        Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP );
        Rcpp::traits::input_parameter< const int >::type chunkSize(chunkSizeSEXP );
        Rcpp::traits::input_parameter< const int >::type ompChunkSize(ompChunkSizeSEXP );
        SEXP __result = icd9ComorbidShortMatrix(icd9df, icd9Mapping, visitId, icd9Field, threads, chunkSize, ompChunkSize);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ComorbidShortMatrix(SEXP icd9dfSEXP, SEXP icd9MappingSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP threadsSEXP, SEXP chunkSizeSEXP, SEXP ompChunkSizeSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ComorbidShortMatrix_try(icd9dfSEXP, icd9MappingSEXP, visitIdSEXP, icd9FieldSEXP, threadsSEXP, chunkSizeSEXP, ompChunkSizeSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ComorbidShortOpenMPVecInt
SEXP icd9ComorbidShortOpenMPVecInt(const DataFrame icd9df, const List icd9Mapping, const std::string visitId = "visitId", const std::string icd9Field = "icd9", const int threads = 8, const int chunkSize = 256, const int ompChunkSize = 1);
static SEXP icd9_icd9ComorbidShortOpenMPVecInt_try(SEXP icd9dfSEXP, SEXP icd9MappingSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP threadsSEXP, SEXP chunkSizeSEXP, SEXP ompChunkSizeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const DataFrame >::type icd9df(icd9dfSEXP );
        Rcpp::traits::input_parameter< const List >::type icd9Mapping(icd9MappingSEXP );
        Rcpp::traits::input_parameter< const std::string >::type visitId(visitIdSEXP );
        Rcpp::traits::input_parameter< const std::string >::type icd9Field(icd9FieldSEXP );
        Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP );
        Rcpp::traits::input_parameter< const int >::type chunkSize(chunkSizeSEXP );
        Rcpp::traits::input_parameter< const int >::type ompChunkSize(ompChunkSizeSEXP );
        SEXP __result = icd9ComorbidShortOpenMPVecInt(icd9df, icd9Mapping, visitId, icd9Field, threads, chunkSize, ompChunkSize);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ComorbidShortOpenMPVecInt(SEXP icd9dfSEXP, SEXP icd9MappingSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP threadsSEXP, SEXP chunkSizeSEXP, SEXP ompChunkSizeSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ComorbidShortOpenMPVecInt_try(icd9dfSEXP, icd9MappingSEXP, visitIdSEXP, icd9FieldSEXP, threadsSEXP, chunkSizeSEXP, ompChunkSizeSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToCode
CharacterVector icd9MajMinToCode(const CharacterVector major, const CharacterVector minor, bool isShort);
static SEXP icd9_icd9MajMinToCode_try(SEXP majorSEXP, SEXP minorSEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type major(majorSEXP );
        Rcpp::traits::input_parameter< const CharacterVector >::type minor(minorSEXP );
        Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP );
        CharacterVector __result = icd9MajMinToCode(major, minor, isShort);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToCode(SEXP majorSEXP, SEXP minorSEXP, SEXP isShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToCode_try(majorSEXP, minorSEXP, isShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToShort
CharacterVector icd9MajMinToShort(const CharacterVector major, const CharacterVector minor);
static SEXP icd9_icd9MajMinToShort_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type major(majorSEXP );
        Rcpp::traits::input_parameter< const CharacterVector >::type minor(minorSEXP );
        CharacterVector __result = icd9MajMinToShort(major, minor);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToShort(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToShort_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToDecimal
CharacterVector icd9MajMinToDecimal(const CharacterVector major, const CharacterVector minor);
static SEXP icd9_icd9MajMinToDecimal_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type major(majorSEXP );
        Rcpp::traits::input_parameter< const CharacterVector >::type minor(minorSEXP );
        CharacterVector __result = icd9MajMinToDecimal(major, minor);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToDecimal(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToDecimal_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9PartsToShort
CharacterVector icd9PartsToShort(const List parts);
static SEXP icd9_icd9PartsToShort_try(SEXP partsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const List >::type parts(partsSEXP );
        CharacterVector __result = icd9PartsToShort(parts);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9PartsToShort(SEXP partsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9PartsToShort_try(partsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9PartsToDecimal
CharacterVector icd9PartsToDecimal(const List parts);
static SEXP icd9_icd9PartsToDecimal_try(SEXP partsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const List >::type parts(partsSEXP );
        CharacterVector __result = icd9PartsToDecimal(parts);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9PartsToDecimal(SEXP partsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9PartsToDecimal_try(partsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToParts
List icd9MajMinToParts(const CharacterVector major, const CharacterVector minor);
static SEXP icd9_icd9MajMinToParts_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type major(majorSEXP );
        Rcpp::traits::input_parameter< const CharacterVector >::type minor(minorSEXP );
        List __result = icd9MajMinToParts(major, minor);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToParts(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToParts_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToParts_list
List icd9MajMinToParts_list(const CharacterVector major, const CharacterVector minor);
static SEXP icd9_icd9MajMinToParts_list_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type major(majorSEXP );
        Rcpp::traits::input_parameter< const CharacterVector >::type minor(minorSEXP );
        List __result = icd9MajMinToParts_list(major, minor);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToParts_list(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToParts_list_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ShortToParts
List icd9ShortToParts(const CharacterVector icd9Short, const String minorEmpty = "");
static SEXP icd9_icd9ShortToParts_try(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type icd9Short(icd9ShortSEXP );
        Rcpp::traits::input_parameter< const String >::type minorEmpty(minorEmptySEXP );
        List __result = icd9ShortToParts(icd9Short, minorEmpty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ShortToParts(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ShortToParts_try(icd9ShortSEXP, minorEmptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9DecimalToParts
List icd9DecimalToParts(const CharacterVector icd9Decimal, const String minorEmpty = "");
static SEXP icd9_icd9DecimalToParts_try(SEXP icd9DecimalSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type icd9Decimal(icd9DecimalSEXP );
        Rcpp::traits::input_parameter< const String >::type minorEmpty(minorEmptySEXP );
        List __result = icd9DecimalToParts(icd9Decimal, minorEmpty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9DecimalToParts(SEXP icd9DecimalSEXP, SEXP minorEmptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9DecimalToParts_try(icd9DecimalSEXP, minorEmptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ShortToDecimal
CharacterVector icd9ShortToDecimal(const CharacterVector icd9Short);
static SEXP icd9_icd9ShortToDecimal_try(SEXP icd9ShortSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type icd9Short(icd9ShortSEXP );
        CharacterVector __result = icd9ShortToDecimal(icd9Short);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ShortToDecimal(SEXP icd9ShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ShortToDecimal_try(icd9ShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9DecimalToShort
CharacterVector icd9DecimalToShort(const CharacterVector icd9Decimal);
static SEXP icd9_icd9DecimalToShort_try(SEXP icd9DecimalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type icd9Decimal(icd9DecimalSEXP );
        CharacterVector __result = icd9DecimalToShort(icd9Decimal);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9DecimalToShort(SEXP icd9DecimalSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9DecimalToShort_try(icd9DecimalSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9GetMajor
CharacterVector icd9GetMajor(const CharacterVector icd9, const bool isShort);
static SEXP icd9_icd9GetMajor_try(SEXP icd9SEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const CharacterVector >::type icd9(icd9SEXP );
        Rcpp::traits::input_parameter< const bool >::type isShort(isShortSEXP );
        CharacterVector __result = icd9GetMajor(icd9, isShort);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9GetMajor(SEXP icd9SEXP, SEXP isShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9GetMajor_try(icd9SEXP, isShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsASingleV
bool icd9IsASingleV(std::string s);
static SEXP icd9_icd9IsASingleV_try(SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type s(sSEXP );
        bool __result = icd9IsASingleV(s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsASingleV(SEXP sSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsASingleV_try(sSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsASingleE
bool icd9IsASingleE(std::string s);
static SEXP icd9_icd9IsASingleE_try(SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type s(sSEXP );
        bool __result = icd9IsASingleE(s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsASingleE(SEXP sSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsASingleE_try(sSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsASingleVE
bool icd9IsASingleVE(std::string s);
static SEXP icd9_icd9IsASingleVE_try(SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type s(sSEXP );
        bool __result = icd9IsASingleVE(s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsASingleVE(SEXP sSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsASingleVE_try(sSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsV
std::vector<bool> icd9IsV(std::vector< std::string > icd9);
static SEXP icd9_icd9IsV_try(SEXP icd9SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector< std::string > >::type icd9(icd9SEXP );
        std::vector<bool> __result = icd9IsV(icd9);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsV(SEXP icd9SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsV_try(icd9SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsE
std::vector<bool> icd9IsE(std::vector< std::string > icd9);
static SEXP icd9_icd9IsE_try(SEXP icd9SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector< std::string > >::type icd9(icd9SEXP );
        std::vector<bool> __result = icd9IsE(icd9);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsE(SEXP icd9SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsE_try(icd9SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsVE
std::vector<bool> icd9IsVE(std::vector< std::string > icd9);
static SEXP icd9_icd9IsVE_try(SEXP icd9SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector< std::string > >::type icd9(icd9SEXP );
        std::vector<bool> __result = icd9IsVE(icd9);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsVE(SEXP icd9SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsVE_try(icd9SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsN
std::vector<bool> icd9IsN(std::vector< std::string > icd9);
static SEXP icd9_icd9IsN_try(SEXP icd9SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector< std::string > >::type icd9(icd9SEXP );
        std::vector<bool> __result = icd9IsN(icd9);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsN(SEXP icd9SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsN_try(icd9SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9LongToWideMatrixByMap
SEXP icd9LongToWideMatrixByMap(const SEXP& icd9df, const std::string visitId = "visitId", const std::string icd9Field = "icd9");
static SEXP icd9_icd9LongToWideMatrixByMap_try(SEXP icd9dfSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const SEXP& >::type icd9df(icd9dfSEXP );
        Rcpp::traits::input_parameter< const std::string >::type visitId(visitIdSEXP );
        Rcpp::traits::input_parameter< const std::string >::type icd9Field(icd9FieldSEXP );
        SEXP __result = icd9LongToWideMatrixByMap(icd9df, visitId, icd9Field);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9LongToWideMatrixByMap(SEXP icd9dfSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9LongToWideMatrixByMap_try(icd9dfSEXP, visitIdSEXP, icd9FieldSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9LongToWide
CharacterVector icd9LongToWide(const SEXP& icd9df, const std::string visitId = "visitId", const std::string icd9Field = "icd9", bool aggregate = true);
static SEXP icd9_icd9LongToWide_try(SEXP icd9dfSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP aggregateSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< const SEXP& >::type icd9df(icd9dfSEXP );
        Rcpp::traits::input_parameter< const std::string >::type visitId(visitIdSEXP );
        Rcpp::traits::input_parameter< const std::string >::type icd9Field(icd9FieldSEXP );
        Rcpp::traits::input_parameter< bool >::type aggregate(aggregateSEXP );
        CharacterVector __result = icd9LongToWide(icd9df, visitId, icd9Field, aggregate);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9LongToWide(SEXP icd9dfSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP aggregateSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9LongToWide_try(icd9dfSEXP, visitIdSEXP, icd9FieldSEXP, aggregateSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesMajorSingle
String icd9AddLeadingZeroesMajorSingle(String major);
static SEXP icd9_icd9AddLeadingZeroesMajorSingle_try(SEXP majorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< String >::type major(majorSEXP );
        String __result = icd9AddLeadingZeroesMajorSingle(major);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesMajorSingle(SEXP majorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesMajorSingle_try(majorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroes
CharacterVector icd9AddLeadingZeroes(CharacterVector icd9, bool isShort);
static SEXP icd9_icd9AddLeadingZeroes_try(SEXP icd9SEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9(icd9SEXP );
        Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP );
        CharacterVector __result = icd9AddLeadingZeroes(icd9, isShort);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroes(SEXP icd9SEXP, SEXP isShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroes_try(icd9SEXP, isShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesShort
CharacterVector icd9AddLeadingZeroesShort(CharacterVector icd9Short);
static SEXP icd9_icd9AddLeadingZeroesShort_try(SEXP icd9ShortSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Short(icd9ShortSEXP );
        CharacterVector __result = icd9AddLeadingZeroesShort(icd9Short);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesShort(SEXP icd9ShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesShort_try(icd9ShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesDecimal
CharacterVector icd9AddLeadingZeroesDecimal(CharacterVector icd9Decimal);
static SEXP icd9_icd9AddLeadingZeroesDecimal_try(SEXP icd9DecimalSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Decimal(icd9DecimalSEXP );
        CharacterVector __result = icd9AddLeadingZeroesDecimal(icd9Decimal);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesDecimal(SEXP icd9DecimalSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesDecimal_try(icd9DecimalSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesMajor
CharacterVector icd9AddLeadingZeroesMajor(CharacterVector major);
static SEXP icd9_icd9AddLeadingZeroesMajor_try(SEXP majorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type major(majorSEXP );
        CharacterVector __result = icd9AddLeadingZeroesMajor(major);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesMajor(SEXP majorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesMajor_try(majorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ExpandMinor
CharacterVector icd9ExpandMinor(std::string minor, bool isE = false);
static SEXP icd9_icd9ExpandMinor_try(SEXP minorSEXP, SEXP isESEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string >::type minor(minorSEXP );
        Rcpp::traits::input_parameter< bool >::type isE(isESEXP );
        CharacterVector __result = icd9ExpandMinor(minor, isE);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ExpandMinor(SEXP minorSEXP, SEXP isESEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ExpandMinor_try(minorSEXP, isESEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9Children_cpp
CharacterVector icd9Children_cpp(CharacterVector icd9, bool isShort, bool onlyReal = true);
static SEXP icd9_icd9Children_cpp_try(SEXP icd9SEXP, SEXP isShortSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9(icd9SEXP );
        Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP );
        Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP );
        CharacterVector __result = icd9Children_cpp(icd9, isShort, onlyReal);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9Children_cpp(SEXP icd9SEXP, SEXP isShortSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9Children_cpp_try(icd9SEXP, isShortSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ChildrenShort
CharacterVector icd9ChildrenShort(CharacterVector icd9Short, bool onlyReal = true);
static SEXP icd9_icd9ChildrenShort_try(SEXP icd9ShortSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Short(icd9ShortSEXP );
        Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP );
        CharacterVector __result = icd9ChildrenShort(icd9Short, onlyReal);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ChildrenShort(SEXP icd9ShortSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ChildrenShort_try(icd9ShortSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ChildrenDecimal
CharacterVector icd9ChildrenDecimal(CharacterVector icd9Decimal, bool onlyReal = true);
static SEXP icd9_icd9ChildrenDecimal_try(SEXP icd9DecimalSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Decimal(icd9DecimalSEXP );
        Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP );
        CharacterVector __result = icd9ChildrenDecimal(icd9Decimal, onlyReal);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ChildrenDecimal(SEXP icd9DecimalSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ChildrenDecimal_try(icd9DecimalSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9InReferenceCode
LogicalVector icd9InReferenceCode(CharacterVector icd9, CharacterVector icd9Reference, bool isShort, bool isShortReference = true);
static SEXP icd9_icd9InReferenceCode_try(SEXP icd9SEXP, SEXP icd9ReferenceSEXP, SEXP isShortSEXP, SEXP isShortReferenceSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9(icd9SEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Reference(icd9ReferenceSEXP );
        Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP );
        Rcpp::traits::input_parameter< bool >::type isShortReference(isShortReferenceSEXP );
        LogicalVector __result = icd9InReferenceCode(icd9, icd9Reference, isShort, isShortReference);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9InReferenceCode(SEXP icd9SEXP, SEXP icd9ReferenceSEXP, SEXP isShortSEXP, SEXP isShortReferenceSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9InReferenceCode_try(icd9SEXP, icd9ReferenceSEXP, isShortSEXP, isShortReferenceSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsV_cpp_slower
std::vector<bool> icd9IsV_cpp_slower(std::vector< std::string > sv);
static SEXP icd9_icd9IsV_cpp_slower_try(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsV_cpp_slower(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsV_cpp_slower(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsV_cpp_slower_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ShortToParts_cpp_slow
List icd9ShortToParts_cpp_slow(CharacterVector icd9Short, String minorEmpty = "");
static SEXP icd9_icd9ShortToParts_cpp_slow_try(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Short(icd9ShortSEXP );
        Rcpp::traits::input_parameter< String >::type minorEmpty(minorEmptySEXP );
        List __result = icd9ShortToParts_cpp_slow(icd9Short, minorEmpty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ShortToParts_cpp_slow(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ShortToParts_cpp_slow_try(icd9ShortSEXP, minorEmptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToParts_slower
List icd9MajMinToParts_slower(CharacterVector major, CharacterVector minor);
static SEXP icd9_icd9MajMinToParts_slower_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type major(majorSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type minor(minorSEXP );
        List __result = icd9MajMinToParts_slower(major, minor);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToParts_slower(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToParts_slower_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsV_cpp_slow
std::vector<bool> icd9IsV_cpp_slow(std::vector< std::string > sv);
static SEXP icd9_icd9IsV_cpp_slow_try(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsV_cpp_slow(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsV_cpp_slow(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsV_cpp_slow_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsE_cpp_slow
std::vector<bool> icd9IsE_cpp_slow(std::vector< std::string > sv);
static SEXP icd9_icd9IsE_cpp_slow_try(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsE_cpp_slow(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsE_cpp_slow(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsE_cpp_slow_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsVE_cpp_slow
std::vector<bool> icd9IsVE_cpp_slow(std::vector< std::string > sv);
static SEXP icd9_icd9IsVE_cpp_slow_try(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsVE_cpp_slow(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsVE_cpp_slow(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsVE_cpp_slow_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ShortToParts_cpp_test
List icd9ShortToParts_cpp_test(CharacterVector icd9Short, std::string minorEmpty = "");
static SEXP icd9_icd9ShortToParts_cpp_test_try(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Short(icd9ShortSEXP );
        Rcpp::traits::input_parameter< std::string >::type minorEmpty(minorEmptySEXP );
        List __result = icd9ShortToParts_cpp_test(icd9Short, minorEmpty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ShortToParts_cpp_test(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ShortToParts_cpp_test_try(icd9ShortSEXP, minorEmptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// strim_cpp
std::string strim_cpp(std::string& s);
static SEXP icd9_strim_cpp_try(SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::string& >::type s(sSEXP );
        std::string __result = strim_cpp(s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_strim_cpp(SEXP sSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_strim_cpp_try(sSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// trim_cpp
std::vector<std::string > trim_cpp(std::vector<std::string >& sv);
static SEXP icd9_trim_cpp_try(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< std::vector<std::string >& >::type sv(svSEXP );
        std::vector<std::string > __result = trim_cpp(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_trim_cpp(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_trim_cpp_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int icd9_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("SEXP(*icd9ComorbidShortMatrix)(const DataFrame&,const List&,const std::string,const std::string,const int,const int,const int)");
        signatures.insert("SEXP(*icd9ComorbidShortOpenMPVecInt)(const DataFrame,const List,const std::string,const std::string,const int,const int,const int)");
        signatures.insert("CharacterVector(*icd9MajMinToCode)(const CharacterVector,const CharacterVector,bool)");
        signatures.insert("CharacterVector(*icd9MajMinToShort)(const CharacterVector,const CharacterVector)");
        signatures.insert("CharacterVector(*icd9MajMinToDecimal)(const CharacterVector,const CharacterVector)");
        signatures.insert("CharacterVector(*icd9PartsToShort)(const List)");
        signatures.insert("CharacterVector(*icd9PartsToDecimal)(const List)");
        signatures.insert("List(*icd9MajMinToParts)(const CharacterVector,const CharacterVector)");
        signatures.insert("List(*icd9MajMinToParts_list)(const CharacterVector,const CharacterVector)");
        signatures.insert("List(*icd9ShortToParts)(const CharacterVector,const String)");
        signatures.insert("List(*icd9DecimalToParts)(const CharacterVector,const String)");
        signatures.insert("CharacterVector(*icd9ShortToDecimal)(const CharacterVector)");
        signatures.insert("CharacterVector(*icd9DecimalToShort)(const CharacterVector)");
        signatures.insert("CharacterVector(*icd9GetMajor)(const CharacterVector,const bool)");
        signatures.insert("bool(*icd9IsASingleV)(std::string)");
        signatures.insert("bool(*icd9IsASingleE)(std::string)");
        signatures.insert("bool(*icd9IsASingleVE)(std::string)");
        signatures.insert("std::vector<bool>(*icd9IsV)(std::vector< std::string >)");
        signatures.insert("std::vector<bool>(*icd9IsE)(std::vector< std::string >)");
        signatures.insert("std::vector<bool>(*icd9IsVE)(std::vector< std::string >)");
        signatures.insert("std::vector<bool>(*icd9IsN)(std::vector< std::string >)");
        signatures.insert("SEXP(*icd9LongToWideMatrixByMap)(const SEXP&,const std::string,const std::string)");
        signatures.insert("CharacterVector(*icd9LongToWide)(const SEXP&,const std::string,const std::string,bool)");
        signatures.insert("String(*icd9AddLeadingZeroesMajorSingle)(String)");
        signatures.insert("CharacterVector(*icd9AddLeadingZeroes)(CharacterVector,bool)");
        signatures.insert("CharacterVector(*icd9AddLeadingZeroesShort)(CharacterVector)");
        signatures.insert("CharacterVector(*icd9AddLeadingZeroesDecimal)(CharacterVector)");
        signatures.insert("CharacterVector(*icd9AddLeadingZeroesMajor)(CharacterVector)");
        signatures.insert("CharacterVector(*icd9ExpandMinor)(std::string,bool)");
        signatures.insert("CharacterVector(*icd9Children_cpp)(CharacterVector,bool,bool)");
        signatures.insert("CharacterVector(*icd9ChildrenShort)(CharacterVector,bool)");
        signatures.insert("CharacterVector(*icd9ChildrenDecimal)(CharacterVector,bool)");
        signatures.insert("LogicalVector(*icd9InReferenceCode)(CharacterVector,CharacterVector,bool,bool)");
        signatures.insert("std::vector<bool>(*icd9IsV_cpp_slower)(std::vector< std::string >)");
        signatures.insert("List(*icd9ShortToParts_cpp_slow)(CharacterVector,String)");
        signatures.insert("List(*icd9MajMinToParts_slower)(CharacterVector,CharacterVector)");
        signatures.insert("std::vector<bool>(*icd9IsV_cpp_slow)(std::vector< std::string >)");
        signatures.insert("std::vector<bool>(*icd9IsE_cpp_slow)(std::vector< std::string >)");
        signatures.insert("std::vector<bool>(*icd9IsVE_cpp_slow)(std::vector< std::string >)");
        signatures.insert("List(*icd9ShortToParts_cpp_test)(CharacterVector,std::string)");
        signatures.insert("std::string(*strim_cpp)(std::string&)");
        signatures.insert("std::vector<std::string >(*trim_cpp)(std::vector<std::string >&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP icd9_RcppExport_registerCCallable() { 
    R_RegisterCCallable("icd9", "icd9_icd9ComorbidShortMatrix", (DL_FUNC)icd9_icd9ComorbidShortMatrix_try);
    R_RegisterCCallable("icd9", "icd9_icd9ComorbidShortOpenMPVecInt", (DL_FUNC)icd9_icd9ComorbidShortOpenMPVecInt_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToCode", (DL_FUNC)icd9_icd9MajMinToCode_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToShort", (DL_FUNC)icd9_icd9MajMinToShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToDecimal", (DL_FUNC)icd9_icd9MajMinToDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9PartsToShort", (DL_FUNC)icd9_icd9PartsToShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9PartsToDecimal", (DL_FUNC)icd9_icd9PartsToDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToParts", (DL_FUNC)icd9_icd9MajMinToParts_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToParts_list", (DL_FUNC)icd9_icd9MajMinToParts_list_try);
    R_RegisterCCallable("icd9", "icd9_icd9ShortToParts", (DL_FUNC)icd9_icd9ShortToParts_try);
    R_RegisterCCallable("icd9", "icd9_icd9DecimalToParts", (DL_FUNC)icd9_icd9DecimalToParts_try);
    R_RegisterCCallable("icd9", "icd9_icd9ShortToDecimal", (DL_FUNC)icd9_icd9ShortToDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9DecimalToShort", (DL_FUNC)icd9_icd9DecimalToShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9GetMajor", (DL_FUNC)icd9_icd9GetMajor_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsASingleV", (DL_FUNC)icd9_icd9IsASingleV_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsASingleE", (DL_FUNC)icd9_icd9IsASingleE_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsASingleVE", (DL_FUNC)icd9_icd9IsASingleVE_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsV", (DL_FUNC)icd9_icd9IsV_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsE", (DL_FUNC)icd9_icd9IsE_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsVE", (DL_FUNC)icd9_icd9IsVE_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsN", (DL_FUNC)icd9_icd9IsN_try);
    R_RegisterCCallable("icd9", "icd9_icd9LongToWideMatrixByMap", (DL_FUNC)icd9_icd9LongToWideMatrixByMap_try);
    R_RegisterCCallable("icd9", "icd9_icd9LongToWide", (DL_FUNC)icd9_icd9LongToWide_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesMajorSingle", (DL_FUNC)icd9_icd9AddLeadingZeroesMajorSingle_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroes", (DL_FUNC)icd9_icd9AddLeadingZeroes_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesShort", (DL_FUNC)icd9_icd9AddLeadingZeroesShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesDecimal", (DL_FUNC)icd9_icd9AddLeadingZeroesDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesMajor", (DL_FUNC)icd9_icd9AddLeadingZeroesMajor_try);
    R_RegisterCCallable("icd9", "icd9_icd9ExpandMinor", (DL_FUNC)icd9_icd9ExpandMinor_try);
    R_RegisterCCallable("icd9", "icd9_icd9Children_cpp", (DL_FUNC)icd9_icd9Children_cpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9ChildrenShort", (DL_FUNC)icd9_icd9ChildrenShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9ChildrenDecimal", (DL_FUNC)icd9_icd9ChildrenDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9InReferenceCode", (DL_FUNC)icd9_icd9InReferenceCode_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsV_cpp_slower", (DL_FUNC)icd9_icd9IsV_cpp_slower_try);
    R_RegisterCCallable("icd9", "icd9_icd9ShortToParts_cpp_slow", (DL_FUNC)icd9_icd9ShortToParts_cpp_slow_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToParts_slower", (DL_FUNC)icd9_icd9MajMinToParts_slower_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsV_cpp_slow", (DL_FUNC)icd9_icd9IsV_cpp_slow_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsE_cpp_slow", (DL_FUNC)icd9_icd9IsE_cpp_slow_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsVE_cpp_slow", (DL_FUNC)icd9_icd9IsVE_cpp_slow_try);
    R_RegisterCCallable("icd9", "icd9_icd9ShortToParts_cpp_test", (DL_FUNC)icd9_icd9ShortToParts_cpp_test_try);
    R_RegisterCCallable("icd9", "icd9_strim_cpp", (DL_FUNC)icd9_strim_cpp_try);
    R_RegisterCCallable("icd9", "icd9_trim_cpp", (DL_FUNC)icd9_trim_cpp_try);
    R_RegisterCCallable("icd9", "icd9_RcppExport_validate", (DL_FUNC)icd9_RcppExport_validate);
    return R_NilValue;
}
