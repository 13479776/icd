// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// icd9IsA_cpp_slow
bool icd9IsA_cpp_slow(std::string s, std::string c);
RcppExport SEXP icd9_icd9IsA_cpp_slow(SEXP sSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type s(sSEXP );
        Rcpp::traits::input_parameter< std::string >::type c(cSEXP );
        bool __result = icd9IsA_cpp_slow(s, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9IsV_cpp_slower
std::vector<bool> icd9IsV_cpp_slower(std::vector< std::string > sv);
RcppExport SEXP icd9_icd9IsV_cpp_slower(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsV_cpp_slower(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9IsV
std::vector<bool> icd9IsV(std::vector< std::string > sv);
RcppExport SEXP icd9_icd9IsV(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsV(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9IsE
std::vector<bool> icd9IsE(std::vector< std::string > sv);
RcppExport SEXP icd9_icd9IsE(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsE(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9IsVE
std::vector<bool> icd9IsVE(std::vector< std::string > sv);
RcppExport SEXP icd9_icd9IsVE(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsVE(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9Is_cpp_slow
std::vector<bool> icd9Is_cpp_slow(std::vector< std::string > sv, std::string c);
RcppExport SEXP icd9_icd9Is_cpp_slow(SEXP svSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        Rcpp::traits::input_parameter< std::string >::type c(cSEXP );
        std::vector<bool> __result = icd9Is_cpp_slow(sv, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9IsV_cpp_slow
std::vector<bool> icd9IsV_cpp_slow(std::vector< std::string > sv);
RcppExport SEXP icd9_icd9IsV_cpp_slow(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsV_cpp_slow(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9IsE_cpp_slow
std::vector<bool> icd9IsE_cpp_slow(std::vector< std::string > sv);
RcppExport SEXP icd9_icd9IsE_cpp_slow(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsE_cpp_slow(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9IsVE_cpp_slow
std::vector<bool> icd9IsVE_cpp_slow(std::vector< std::string > sv);
RcppExport SEXP icd9_icd9IsVE_cpp_slow(SEXP svSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type sv(svSEXP );
        std::vector<bool> __result = icd9IsVE_cpp_slow(sv);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9MajMinToCode
CharacterVector icd9MajMinToCode(CharacterVector mj, CharacterVector mn, bool isShort);
RcppExport SEXP icd9_icd9MajMinToCode(SEXP mjSEXP, SEXP mnSEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type mj(mjSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type mn(mnSEXP );
        Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP );
        CharacterVector __result = icd9MajMinToCode(mj, mn, isShort);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9MajMinToShort
CharacterVector icd9MajMinToShort(CharacterVector mjr, CharacterVector mnr);
RcppExport SEXP icd9_icd9MajMinToShort(SEXP mjrSEXP, SEXP mnrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type mjr(mjrSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type mnr(mnrSEXP );
        CharacterVector __result = icd9MajMinToShort(mjr, mnr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9MajMinToDecimal
CharacterVector icd9MajMinToDecimal(CharacterVector mjr, CharacterVector mnr);
RcppExport SEXP icd9_icd9MajMinToDecimal(SEXP mjrSEXP, SEXP mnrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type mjr(mjrSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type mnr(mnrSEXP );
        CharacterVector __result = icd9MajMinToDecimal(mjr, mnr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9PartsToShort
CharacterVector icd9PartsToShort(List parts);
RcppExport SEXP icd9_icd9PartsToShort(SEXP partsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type parts(partsSEXP );
        CharacterVector __result = icd9PartsToShort(parts);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9PartsToDecimal
CharacterVector icd9PartsToDecimal(List parts);
RcppExport SEXP icd9_icd9PartsToDecimal(SEXP partsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type parts(partsSEXP );
        CharacterVector __result = icd9PartsToDecimal(parts);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9MajMinToParts
List icd9MajMinToParts(CharacterVector mjr, CharacterVector mnr);
RcppExport SEXP icd9_icd9MajMinToParts(SEXP mjrSEXP, SEXP mnrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type mjr(mjrSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type mnr(mnrSEXP );
        List __result = icd9MajMinToParts(mjr, mnr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9MajMinToParts_list
List icd9MajMinToParts_list(CharacterVector mjr, CharacterVector mnr);
RcppExport SEXP icd9_icd9MajMinToParts_list(SEXP mjrSEXP, SEXP mnrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type mjr(mjrSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type mnr(mnrSEXP );
        List __result = icd9MajMinToParts_list(mjr, mnr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9MajMinToParts_slower
List icd9MajMinToParts_slower(CharacterVector mjr, CharacterVector mnr);
RcppExport SEXP icd9_icd9MajMinToParts_slower(SEXP mjrSEXP, SEXP mnrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type mjr(mjrSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type mnr(mnrSEXP );
        List __result = icd9MajMinToParts_slower(mjr, mnr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9ShortToParts_cpp_slow
List icd9ShortToParts_cpp_slow(CharacterVector icd9Short, String minorEmpty = "");
RcppExport SEXP icd9_icd9ShortToParts_cpp_slow(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Short(icd9ShortSEXP );
        Rcpp::traits::input_parameter< String >::type minorEmpty(minorEmptySEXP );
        List __result = icd9ShortToParts_cpp_slow(icd9Short, minorEmpty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9ShortToParts
List icd9ShortToParts(CharacterVector icd9Short, std::string minorEmpty = "");
RcppExport SEXP icd9_icd9ShortToParts(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Short(icd9ShortSEXP );
        Rcpp::traits::input_parameter< std::string >::type minorEmpty(minorEmptySEXP );
        List __result = icd9ShortToParts(icd9Short, minorEmpty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9DecimalToParts
List icd9DecimalToParts(CharacterVector icd9Decimal, std::string minorEmpty = "");
RcppExport SEXP icd9_icd9DecimalToParts(SEXP icd9DecimalSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Decimal(icd9DecimalSEXP );
        Rcpp::traits::input_parameter< std::string >::type minorEmpty(minorEmptySEXP );
        List __result = icd9DecimalToParts(icd9Decimal, minorEmpty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9ShortToParts_cpp_test
List icd9ShortToParts_cpp_test(CharacterVector icd9Short, std::string minorEmpty = "");
RcppExport SEXP icd9_icd9ShortToParts_cpp_test(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Short(icd9ShortSEXP );
        Rcpp::traits::input_parameter< std::string >::type minorEmpty(minorEmptySEXP );
        List __result = icd9ShortToParts_cpp_test(icd9Short, minorEmpty);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9ShortToDecimal
CharacterVector icd9ShortToDecimal(CharacterVector x);
RcppExport SEXP icd9_icd9ShortToDecimal(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP );
        CharacterVector __result = icd9ShortToDecimal(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9ExpandMinor
CharacterVector icd9ExpandMinor(std::string x, bool isE);
RcppExport SEXP icd9_icd9ExpandMinor(SEXP xSEXP, SEXP isESEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type x(xSEXP );
        Rcpp::traits::input_parameter< bool >::type isE(isESEXP );
        CharacterVector __result = icd9ExpandMinor(x, isE);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9ChildrenShort
CharacterVector icd9ChildrenShort(CharacterVector icd9Short, bool onlyReal = false);
RcppExport SEXP icd9_icd9ChildrenShort(SEXP icd9ShortSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Short(icd9ShortSEXP );
        Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP );
        CharacterVector __result = icd9ChildrenShort(icd9Short, onlyReal);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9ChildrenDecimal
CharacterVector icd9ChildrenDecimal(CharacterVector icd9Decimal, bool onlyReal = false);
RcppExport SEXP icd9_icd9ChildrenDecimal(SEXP icd9DecimalSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type icd9Decimal(icd9DecimalSEXP );
        Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP );
        CharacterVector __result = icd9ChildrenDecimal(icd9Decimal, onlyReal);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// icd9GetMajor
CharacterVector icd9GetMajor(CharacterVector icd9, bool isShort);
RcppExport SEXP icd9_icd9GetMajor(SEXP icd9SEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type icd9(icd9SEXP );
        Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP );
        CharacterVector __result = icd9GetMajor(icd9, isShort);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
