% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{icd9Is_cpp_slow}
\alias{icd9IsE_cpp_slow}
\alias{icd9IsVE_cpp_slow}
\alias{icd9IsV_cpp_slow}
\alias{icd9Is_cpp_slow}
\title{is the given code V or E type?}
\usage{
icd9IsV_cpp_slow(sv)

icd9IsE_cpp_slow(sv)

icd9IsVE_cpp_slow(sv)
}
\arguments{
\item{icd9}{is a character vector of ICD-9 codes. If fewer than five characters is
given in a code, then the digits are greedily assigned to hundreds, then
tens, then units, before the decimal parts. E.g. "10" becomes "010", not
"0010"}
}
\description{
quickly find V or E codes, without fully validating V or E
  codes. Use fixed instead of regex for speed. Don't check position of V or
  E: this is not validation, just a quick classification of pre-validated
  codes. TODO: this doesn't look efficient, but can't use fixed with ignore
  case, and regex slower.
}
\examples{
library(microbenchmark)
# regex is a little faster than fixed
icd9 <- rep(times = 500, c("1", "not", "V10.0", " E950", ""))
microbenchmark(times = 3,
  grepl(pattern = "E", icd9, fixed = TRUE) |
  grepl(pattern = "e", icd9, fixed = TRUE) |
  grepl(pattern = "V", icd9, fixed = TRUE) |
  grepl(pattern = "v", icd9, fixed = TRUE))
microbenchmark(times = 3, grepl(pattern = "[EeVv]", rnd))
microbenchmark(icd9:::icd9IsV_cpp_slower(icd9), icd9:::icd9IsV_R(icd9), icd9:::icd9IsV_cpp_slow(icd9), icd9:::icd9IsV(icd9))
}

